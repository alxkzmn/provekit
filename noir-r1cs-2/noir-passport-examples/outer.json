{"noir_version":"1.0.0-beta.1+03b58fa2dfcc8acc8cf5198b1b23b55676fbdb02","hash":4444353091139366266,"abi":{"parameters":[{"name":"circuit_registry_root","type":{"kind":"field"},"visibility":"private"},{"name":"certificate_registry_root","type":{"kind":"field"},"visibility":"private"},{"name":"current_date","type":{"kind":"string","length":8},"visibility":"public"},{"name":"dg1_mask","type":{"kind":"array","length":95,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"dg1_reveal","type":{"kind":"array","length":95,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"service_scope","type":{"kind":"field"},"visibility":"public"},{"name":"service_subscope","type":{"kind":"field"},"visibility":"public"},{"name":"scoped_nullifier","type":{"kind":"field"},"visibility":"public"},{"name":"proof_a","type":{"kind":"struct","path":"SubCircuitA","fields":[{"name":"vkey","type":{"kind":"array","length":128,"type":{"kind":"field"}}},{"name":"proof","type":{"kind":"array","length":439,"type":{"kind":"field"}}},{"name":"key_hash","type":{"kind":"field"}},{"name":"public_inputs","type":{"kind":"array","length":1,"type":{"kind":"field"}}},{"name":"tree_hash_path","type":{"kind":"array","length":12,"type":{"kind":"field"}}},{"name":"tree_index","type":{"kind":"field"}}]},"visibility":"private"},{"name":"proof_b","type":{"kind":"struct","path":"SubCircuitB","fields":[{"name":"vkey","type":{"kind":"array","length":128,"type":{"kind":"field"}}},{"name":"proof","type":{"kind":"array","length":439,"type":{"kind":"field"}}},{"name":"public_inputs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"key_hash","type":{"kind":"field"}},{"name":"tree_hash_path","type":{"kind":"array","length":12,"type":{"kind":"field"}}},{"name":"tree_index","type":{"kind":"field"}}]},"visibility":"private"},{"name":"proof_c","type":{"kind":"struct","path":"SubCircuitC","fields":[{"name":"vkey","type":{"kind":"array","length":128,"type":{"kind":"field"}}},{"name":"proof","type":{"kind":"array","length":439,"type":{"kind":"field"}}},{"name":"public_inputs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"key_hash","type":{"kind":"field"}},{"name":"tree_hash_path","type":{"kind":"array","length":12,"type":{"kind":"field"}}},{"name":"tree_index","type":{"kind":"field"}}]},"visibility":"private"},{"name":"proof_d","type":{"kind":"struct","path":"SubCircuitD","fields":[{"name":"vkey","type":{"kind":"array","length":128,"type":{"kind":"field"}}},{"name":"proof","type":{"kind":"array","length":439,"type":{"kind":"field"}}},{"name":"public_inputs","type":{"kind":"array","length":1,"type":{"kind":"field"}}},{"name":"key_hash","type":{"kind":"field"}},{"name":"tree_hash_path","type":{"kind":"array","length":12,"type":{"kind":"field"}}},{"name":"tree_index","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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","file_map":{"18":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        /*@safety: borrow is enforced to be boolean due to its type.\n            if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n            if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n        */\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            /*@safety: decomposition is properly checked below*/\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            unsafe {\n                //@safety: already unconstrained\n                field_less_than(b, a)\n            },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            //@safety: unsafe in unconstrained\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        unsafe {\n            //@safety: Take a hint of the comparison and verify it\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"21":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        //@safety : xlo and xhi decomposition is checked below\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"30":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod bigint;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    unsafe {\n        //@safety: a print statement cannot be constrained\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    unsafe {\n        //@safety: a print statement cannot be constrained\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n","path":"std/lib.nr"},"32":{"source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<let N: u32>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let index_bits: [u1; N] = index.to_le_bits();\n    let mut current = leaf;\n    for i in 0..N {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n","path":"std/merkle.nr"},"76":{"source":"/*\n############################################################\n# Outer Circuit\n############################################################\n# Wraps 4 inner proofs (from circuits A, B, C and D)\n############################################################\n\n# Inputs/Outputs\n############################################################\n\n# Outstanding Questions\n############################################################\n- Outer circuit interface: single multiparam commitment output, for uniform interface? e.g. `H(dg1_bitmask, dg1_reveal, service_scope, nullifier)`\nCan be verified outside of circuit proof with correct pre-image\n*/\n\nuse std::verify_proof;\n\nfn prepare_proof_c_inputs<let DATE_LEN: u32>(\n    current_date: str<DATE_LEN>,\n    f1: Field,\n    f2: Field,\n) -> [Field; DATE_LEN + 2] {\n    let date_bytes: [u8; DATE_LEN] = current_date.as_bytes();\n    let mut result: [Field; 2 + DATE_LEN] = [0; 2 + DATE_LEN];\n    for i in 0..DATE_LEN {\n        result[i] = date_bytes[i] as Field;\n    }\n    result[DATE_LEN] = f1;\n    result[DATE_LEN + 1] = f2;\n    result\n}\n\nfn prepare_proof_d_inputs<let DG1: u32>(\n    comm_in: Field,\n    dg1_mask: [u8; DG1],\n    service_scope: Field,\n    service_subscope: Field,\n    dg1_reveal: [u8; DG1],\n    scoped_nullifier: Field,\n) -> [Field; 1 + DG1 + DG1 + 3] {\n    let mut result: [Field; 1 + DG1 + DG1 + 3] = [0; 1 + DG1 + DG1 + 3];\n    result[0] = comm_in;\n    for i in 0..DG1 {\n        result[1 + i] = dg1_mask[i] as Field;\n    }\n    result[1 + DG1] = service_scope;\n    result[1 + DG1 + 1] = service_subscope;\n    for i in 0..DG1 {\n        result[1 + DG1 + 2 + i] = dg1_reveal[i] as Field;\n    }\n    result[1 + DG1 + 2 + DG1] = scoped_nullifier;\n    result\n}\n\nstruct SubCircuitA {\n    vkey: [Field; 128],\n    proof: [Field; 439],\n    key_hash: Field,\n    public_inputs: [Field; 1],\n    // Hash path for circuit A key hash in the sub-circuit merkle tree\n    // Allows for up to 4,096 leaves\n    tree_hash_path: [Field; 12],\n    // Index of circuit A key hash in the sub-circuit merkle tree\n    tree_index: Field,\n}\nstruct SubCircuitB {\n    vkey: [Field; 128],\n    proof: [Field; 439],\n    public_inputs: [Field; 2],\n    key_hash: Field,\n    // Hash path for circuit B key hash in the sub-circuit merkle tree\n    tree_hash_path: [Field; 12],\n    // Index of circuit B key hash in the sub-circuit merkle tree\n    tree_index: Field,\n}\nstruct SubCircuitC {\n    vkey: [Field; 128],\n    proof: [Field; 439],\n    public_inputs: [Field; 2],\n    key_hash: Field,\n    // Hash path for circuit C key hash in the sub-circuit merkle tree\n    tree_hash_path: [Field; 12],\n    // Index of circuit C key hash in the sub-circuit merkle tree\n    tree_index: Field,\n}\nstruct SubCircuitD {\n    vkey: [Field; 128],\n    proof: [Field; 439],\n    public_inputs: [Field; 1],\n    key_hash: Field,\n    // Hash path for circuit D key hash in the sub-circuit merkle tree\n    tree_hash_path: [Field; 12],\n    // Index of circuit D key hash in the sub-circuit merkle tree\n    tree_index: Field,\n}\n\nfn verify_subproofs(\n    // Root of the sub-circuit merkle tree\n    circuit_registry_root: Field,\n    // Root of the certificate merkle tree\n    certificate_registry_root: Field,\n    // Current date as a string, e.g. 20241103\n    current_date: str<8>,\n    // A mask representing which bytes of DG1 to reveal\n    dg1_mask: [u8; 95],\n    // The revealed bytes of DG1\n    dg1_reveal: [u8; 95],\n    // The nullifier service scope (a Pederson hash of the domain)\n    service_scope: Field,\n    // The service sub-scope\n    service_subscope: Field,\n    // The scoped nullifier: H(private_nullifier,service_scope,service_subscope)\n    scoped_nullifier: Field,\n    proof_a: SubCircuitA,\n    proof_b: SubCircuitB,\n    proof_c: SubCircuitC,\n    proof_d: SubCircuitD,\n) {\n    // Verify that sub-circuit a, b, c, and d vkey hashes exist in the circuit tree\n    let root = std::merkle::compute_merkle_root(\n        proof_a.key_hash,\n        proof_a.tree_index,\n        proof_a.tree_hash_path,\n    );\n    assert(root == circuit_registry_root);\n    let root = std::merkle::compute_merkle_root(\n        proof_b.key_hash,\n        proof_b.tree_index,\n        proof_b.tree_hash_path,\n    );\n    assert(root == circuit_registry_root);\n    let root = std::merkle::compute_merkle_root(\n        proof_c.key_hash,\n        proof_c.tree_index,\n        proof_c.tree_hash_path,\n    );\n    assert(root == circuit_registry_root);\n    let root = std::merkle::compute_merkle_root(\n        proof_d.key_hash,\n        proof_d.tree_index,\n        proof_d.tree_hash_path,\n    );\n    assert(root == circuit_registry_root);\n\n    verify_proof(\n        proof_a.vkey,\n        proof_a.proof,\n        [\n            certificate_registry_root,\n            proof_a.public_inputs[0], // comm_out\n        ],\n        proof_a.key_hash,\n    );\n    verify_proof(\n        proof_b.vkey,\n        proof_b.proof,\n        [\n            proof_b.public_inputs[0], // comm_in\n            proof_b.public_inputs[1], // comm_out\n        ],\n        proof_b.key_hash,\n    );\n\n    verify_proof(\n        proof_c.vkey,\n        proof_c.proof,\n        prepare_proof_c_inputs(\n            current_date,\n            proof_c.public_inputs[0],\n            proof_c.public_inputs[1],\n        ),\n        proof_c.key_hash,\n    );\n\n    verify_proof(\n        proof_d.vkey,\n        proof_d.proof,\n        prepare_proof_d_inputs(\n            proof_d.public_inputs[0], // comm_in\n            dg1_mask,\n            service_scope,\n            service_subscope,\n            dg1_reveal,\n            scoped_nullifier,\n        ),\n        proof_d.key_hash,\n    );\n}\n\nfn main(\n    circuit_registry_root: Field,\n    certificate_registry_root: Field,\n    current_date: pub str<8>,\n    dg1_mask: pub [u8; 95],\n    dg1_reveal: pub [u8; 95],\n    service_scope: pub Field,\n    service_subscope: pub Field,\n    scoped_nullifier: pub Field,\n    proof_a: SubCircuitA,\n    proof_b: SubCircuitB,\n    proof_c: SubCircuitC,\n    proof_d: SubCircuitD,\n) {\n    verify_subproofs(\n        circuit_registry_root,\n        certificate_registry_root,\n        current_date,\n        dg1_mask,\n        dg1_reveal,\n        service_scope,\n        service_subscope,\n        scoped_nullifier,\n        proof_a,\n        proof_b,\n        proof_c,\n        proof_d,\n    );\n    // verify_subproofs_unconstrained(circuit_registry_root, proof_a, proof_b, proof_c, proof_d);\n}\n","path":"/Users/ryan.cao/ryan_tfh/Client_Side_Proving/noir_passport_circuits/src/noir/bin/main/outer/src/main.nr"}},"names":["main"],"brillig_names":["decompose_hint","directive_to_radix"]}